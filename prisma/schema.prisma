generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?

  username String? @unique
  name     String?

  image    String?
  accounts Account[]
  sessions Session[]
}

model Class {
  id               String  @id @default(cuid())
  name             String
  mainTeacher      Teacher @relation("mainTeacher", fields: [mainTeacherId], references: [id], onDelete: NoAction)
  mainTeacherId    String  @unique
  amountOfStudents Int
  groups           Group[]

  lessons Lesson[]
}

model Group {
  id               String @id @default(cuid())
  amountOfStudents Int

  Class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId String

  Lesson Lesson[]

  @@index([classId])
}

model Subject {
  id   String @id @default(cuid())
  name String

  lessons Lesson[]
}

model Room {
  id       String @id @default(cuid())
  name     String
  capacity Int

  lessons Lesson[]
}

model Teacher {
  id      String @id @default(cuid())
  name    String
  surname String

  assignedClass Class?   @relation("mainTeacher")
  lessons       Lesson[]
}

model Lesson {
  id         String @id @default(cuid())
  dayOfWeek  Int
  lessonHour Int

  group     Group   @relation(fields: [groupId], references: [id], onDelete: NoAction)
  groupId   String
  room      Room    @relation(fields: [roomId], references: [id], onDelete: NoAction)
  roomId    String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: NoAction)
  subjectId String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: NoAction)
  teacherId String

  @@index([roomId])
  @@index([subjectId])
  @@index([classId])
  @@index([teacherId])
  @@index([groupId])
}
